#comment| These are mappings to convert the ARRAY_?? cpp class types into
#comment| nearest equivalent intrinsic types in fortran.
#def_type CHECK_CONTEXT
#def_type RAGGED_CONTEXT
#def_type SEXP
#def_type R_CALL
#def_type AdtArrays
#def_type AdtArrayPlan
#type_map   ARRAY_1D   : REAL(8), 1
#type_map   ARRAY_2D   : REAL(8), 2
#type_map   ARRAY_3D   : REAL(8), 3
#type_map   ARRAY_4D   : REAL(8), 4
#type_map   ARRAY_5D   : REAL(8), 5
#type_map   ARRAY_6D   : REAL(8), 6
#type_map   ARRAY_7D   : REAL(8), 7
#type_map   ARRAY_8D   : REAL(8), 8
#type_map   ARRAY_9D   : REAL(8), 9
#type_map   ARRAY_10D  : REAL(8), 10
#type_map   ARRAY_1F   : REAL(4), 1
#type_map   ARRAY_2F   : REAL(4), 2
#type_map   ARRAY_3F   : REAL(4), 3
#type_map   ARRAY_4F   : REAL(4), 4
#type_map   ARRAY_5F   : REAL(4), 5
#type_map   ARRAY_6F   : REAL(4), 6
#type_map   ARRAY_7F   : REAL(4), 7
#type_map   ARRAY_8F   : REAL(4), 8
#type_map   ARRAY_9F   : REAL(4), 9
#type_map   ARRAY_10F  : REAL(4), 10
#type_map   ARRAY_1I   : INTEGER(4), 1
#type_map   ARRAY_2I   : INTEGER(4), 2
#type_map   ARRAY_3I   : INTEGER(4), 3
#type_map   ARRAY_4I   : INTEGER(4), 4
#type_map   ARRAY_5I   : INTEGER(4), 5
#type_map   ARRAY_6I   : INTEGER(4), 6
#type_map   ARRAY_7I   : INTEGER(4), 7
#type_map   ARRAY_8I   : INTEGER(4), 8
#type_map   ARRAY_9I   : INTEGER(4), 9
#type_map   ARRAY_10I  : INTEGER(4), 10
#type_map   ARRAY_1S   : INTEGER(2), 1
#type_map   ARRAY_2S   : INTEGER(2), 2
#type_map   ARRAY_3S   : INTEGER(2), 3
#type_map   ARRAY_4S   : INTEGER(2), 4
#type_map   ARRAY_5S   : INTEGER(2), 5
#type_map   ARRAY_6S   : INTEGER(2), 6
#type_map   ARRAY_7S   : INTEGER(2), 7
#type_map   ARRAY_8S   : INTEGER(2), 8
#type_map   ARRAY_9S   : INTEGER(2), 9
#type_map   ARRAY_10S  : INTEGER(2), 10
#type_map   ARRAY_1L   : INTEGER(4), 1
#type_map   ARRAY_2L   : INTEGER(4), 2
#type_map   ARRAY_3L   : INTEGER(4), 3
#type_map   ARRAY_4L   : INTEGER(4), 4
#type_map   ARRAY_5L   : INTEGER(4), 5
#type_map   ARRAY_6L   : INTEGER(4), 6
#type_map   ARRAY_7L   : INTEGER(4), 7
#type_map   ARRAY_8L   : INTEGER(4), 8
#type_map   ARRAY_9L   : INTEGER(4), 9
#type_map   ARRAY_10L  : INTEGER(4), 10
#type_map   ARRAY_1B   : LOGICAL, 1
#type_map   ARRAY_2B   : LOGICAL, 2
#type_map   ARRAY_3B   : LOGICAL, 3
#type_map   ARRAY_4B   : LOGICAL, 4
#type_map   ARRAY_5B   : LOGICAL, 5
#type_map   ARRAY_6B   : LOGICAL, 6
#type_map   ARRAY_7B   : LOGICAL, 7
#type_map   ARRAY_8B   : LOGICAL, 8
#type_map   ARRAY_9B   : LOGICAL, 9
#type_map   ARRAY_10B  : LOGICAL, 10
#type_map   ARRAY_1LB  : LOGICAL(4), 1
#type_map   ARRAY_2LB  : LOGICAL(4), 2
#type_map   ARRAY_3LB  : LOGICAL(4), 3
#type_map   ARRAY_4LB  : LOGICAL(4), 4
#type_map   ARRAY_5LB  : LOGICAL(4), 5
#type_map   ARRAY_6LB  : LOGICAL(4), 6
#type_map   ARRAY_7LB  : LOGICAL(4), 7
#type_map   ARRAY_8LB  : LOGICAL(4), 8
#type_map   ARRAY_9LB  : LOGICAL(4), 9
#type_map   ARRAY_10LB : LOGICAL(4), 10
#type_map   ARRAY_1C   : INTEGER(1), 1
#type_map   ARRAY_2C   : INTEGER(1), 2
#type_map   ARRAY_3C   : INTEGER(1), 3
#type_map   ARRAY_4C   : INTEGER(1), 4
#type_map   ARRAY_5C   : INTEGER(1), 5
#type_map   ARRAY_6C   : INTEGER(1), 6
#type_map   ARRAY_7C   : INTEGER(1), 7
#type_map   ARRAY_8C   : INTEGER(1), 8
#type_map   ARRAY_9C   : INTEGER(1), 9
#type_map   ARRAY_10C  : INTEGER(1), 10
#type_map   ARRAY_1UI  : UNSIGNED, 1
#type_map   ARRAY_2UI  : UNSIGNED, 2
#type_map   ARRAY_3UI  : UNSIGNED, 3
#type_map   ARRAY_4UI  : UNSIGNED, 4
#type_map   ARRAY_5UI  : UNSIGNED, 5
#type_map   ARRAY_6UI  : UNSIGNED, 6
#type_map   ARRAY_7UI  : UNSIGNED, 7
#type_map   ARRAY_8UI  : UNSIGNED, 8
#type_map   ARRAY_9UI  : UNSIGNED, 9
#type_map   ARRAY_10UI : UNSIGNED, 10
#type_map   ARRAY_1US  : UNSIGNED(2), 1
#type_map   ARRAY_2US  : UNSIGNED(2), 2
#type_map   ARRAY_3US  : UNSIGNED(2), 3
#type_map   ARRAY_4US  : UNSIGNED(2), 4
#type_map   ARRAY_5US  : UNSIGNED(2), 5
#type_map   ARRAY_6US  : UNSIGNED(2), 6
#type_map   ARRAY_7US  : UNSIGNED(2), 7
#type_map   ARRAY_8US  : UNSIGNED(2), 8
#type_map   ARRAY_9US  : UNSIGNED(2), 9
#type_map   ARRAY_10US : UNSIGNED(2), 10
#type_map   ARRAY_1UL  : UNSIGNED(4), 1
#type_map   ARRAY_2UL  : UNSIGNED(4), 2
#type_map   ARRAY_3UL  : UNSIGNED(4), 3
#type_map   ARRAY_4UL  : UNSIGNED(4), 4
#type_map   ARRAY_5UL  : UNSIGNED(4), 5
#type_map   ARRAY_6UL  : UNSIGNED(4), 6
#type_map   ARRAY_7UL  : UNSIGNED(4), 7
#type_map   ARRAY_8UL  : UNSIGNED(4), 8
#type_map   ARRAY_9UL  : UNSIGNED(4), 9
#type_map   ARRAY_10UL : UNSIGNED(4), 10
#type_map   ARRAY_1UC  : UNSIGNED(1), 1
#type_map   ARRAY_2UC  : UNSIGNED(1), 2
#type_map   ARRAY_3UC  : UNSIGNED(1), 3
#type_map   ARRAY_4UC  : UNSIGNED(1), 4
#type_map   ARRAY_5UC  : UNSIGNED(1), 5
#type_map   ARRAY_6UC  : UNSIGNED(1), 6
#type_map   ARRAY_7UC  : UNSIGNED(1), 7
#type_map   ARRAY_8UC  : UNSIGNED(1), 8
#type_map   ARRAY_9UC  : UNSIGNED(1), 9
#type_map   ARRAY_10UC : UNSIGNED(1), 10
#defineb CHECKSIZE(_stack,_i)            if (_i > stackSizeInt(_stack))
                                         {
                                           growStack(_stack,_i);
                                         }
#defineb CHECKSIZE2(_stack,_i1,_i2)      if (i1 > _i2)
                                         {
                                           if (_i1 > stackSizeInt(_stack))
                                           {
                                             growStack(_stack,_i1);
                                           }
                                         }
                                         else if (_i2 > stackSizeInt(_stack))
                                         {
                                           growStack(_stack,_i2);
                                         }
#defineb GETSIZE(_stack)                 stackSizeInt(_stack);
#defineb ACOS(_a)                        acos(_a);
#definef acos(_a)                        ACOS(_a);
#defineb ASIN(_a)                        asin(_a);
#definef asin(_a)                        ASIN(_a);
#defineb ASINH(_a)                       asinh(_a);
#definef asinh(_a)                       ASINH(_a);
#defineb ATANH(_a)                       atanh(_a);
#definef atanh(_a)                       ATANH(_a);
#defineb ATAN(_a)                        atan(_a);
#definef atan(_a)                        ATAN(_a);
#defineb ATAN2(_a,_b)                    atan2(_a,_b);
#definef atan2(_a,_b)                    ATAN2(_a,_b);
#definef cbrt(_a,_b)                     EXP(LOG(_a) / 3.0);
#defineb CEILING(_a)                     ceil(_a);
#definef ceil(_a)                        CEILING(_a);
#defineb SIGN(_a,_b)                     copysign(_a,_b);
#definef copysign(_a,_b)                 SIGN(_a,_b);
#defineb COS(_a)                         cos(_a);
#definef cos(_a)                         COS(_a);
#defineb COSH(_a)                        cosh(_a);
#definef cosh(_a)                        COSH(_a);
#defineb ERF(_a)                         erf(_a);
#definef erf(_a)                         ERF(_a);
#defineb EXP(_a)                         exp(_a);
#definef exp(_a)                         EXP(_a);
#definef expm1(_a)                       EXP(_a)-1.0;
#defineb DABS(_a)                        fabs(_a);
#definef fabs(_a)                        DABS(_a);
#defineb FLOOR(_a)                       floor(_a);
#definef floor(_a)                       FLOOR(_a);
#defineb DMOD(_a)                        fmod(_a);
#definef fmod(_a)                        DMOD(_a);
#defineb GAMMA(_a)                       gamma(_a);
#definef gamma(_a)                       GAMMA(_a);
#defineb HYPOT(_a)                       hypot(_a);
#definef hypot(_a)                       HYPOT(_a);
#defineb INT(_a)                         floor(_a);
#defineb ISINF(_a)                       isinf(_a);
#definef isinf(_a)                       ISINF(_a);
#defineb ISNAN(_a)                       isnan(_a);
#definef isnan(_a)                       ISNAN(_a);
#defineb BESSEL_J0(_a)                   j0(_a);
#definef j0(_a)                          BESSEL_J0(_a);
#defineb SET_EXPONENT(_a,_b)             ldexp(_a,_b);
#definef ldexp(_a,_b)                    SET_EXPONENT(_a,_b);
#defineb LGAMMA(_a)                      lgamma(_a);
#definef lgamma(_a)                      LGAMMA(_a);
#defineb LOG(_a)                         log(_a);
#definef log(_a)                         LOG(_a);
#defineb LOG10(_a)                       log10(_a);
#definef log10(_a)                       LOG10(_a);
#definef log1p(_a)                       LOG(1.0+(_a));
#defineb EXPONENT(_a)                    logb(_a);
#definef logb(_a)                        EXPONENT(_a);
#comment| pow function currently handled by black box definition
#defineb MOD(_a,_b)                      fmod(_a,_b);
#definef fmod(_a,_b)                     MOD(_a,_b);
#defineb SIN(_a)                         sin(_a);
#definef sin(_a)                         SIN(_a);
#defineb SINH(_a)                        sinh(_a);
#definef sinh(_a)                        SINH(_a);
#defineb SQRT(_a)                        sqrt(_a);
#definef sqrt(_a)                        SQRT(_a);
#defineb TAN(_a)                         tan(_a);
#definef tan(_a)                         TAN(_a);
#defineb TANH(_a)                        tanh(_a);
#definef tanh(_a)                        TANH(_a);
#definef logit(_a)                       LOG((_a)/(1.0-(_a)));
#definef sqr(_a)                         _a*_a;
#definef zero(_a)                        _a=0;
#definef set_all(_a,_s)                  _a=_s;
#definef inc(_a)                         _a=_a+1;
#definef dec(_a)                         _a=_a-1;
#definef incby(_a,_s)                    _a=_a+(_s);
#definef decby(_a,_s)                    _a=_a-(_s);
#definef mulby(_a,_s)                    _a=_a*(_s);
#definef divby(_a,_s)                    _a=_a/(_s);
#definef min(_a,_b)                      MIN(_a,_b);
#defineb MIN(_a,_b)                      min(_a,_b);
#definef max(_a,_b)                      MAX(_a,_b);
#defineb MAX(_a,_b)                      max(_a,_b);
