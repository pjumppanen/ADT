#comment| These are mappings to convert the ARRAY_?? pascal class types into
#comment| nearest equivalent intrinsic types in fortran.
#def_type CHECK_CONTEXT
#def_type RAGGED_CONTEXT
#def_type SEXP
#def_type AdtArrays
#def_type AdtArrayPlan
#type_map   ARRAY_1D   : REAL, 1
#type_map   ARRAY_2D   : REAL, 2
#type_map   ARRAY_3D   : REAL, 3
#type_map   ARRAY_4D   : REAL, 4
#type_map   ARRAY_5D   : REAL, 5
#type_map   ARRAY_6D   : REAL, 6
#type_map   ARRAY_7D   : REAL, 7
#type_map   ARRAY_8D   : REAL, 8
#type_map   ARRAY_9D   : REAL, 9
#type_map   ARRAY_10D  : REAL, 10
#type_map   ARRAY_1D   : REAL(8), 1
#type_map   ARRAY_2D   : REAL(8), 2
#type_map   ARRAY_3D   : REAL(8), 3
#type_map   ARRAY_4D   : REAL(8), 4
#type_map   ARRAY_5D   : REAL(8), 5
#type_map   ARRAY_6D   : REAL(8), 6
#type_map   ARRAY_7D   : REAL(8), 7
#type_map   ARRAY_8D   : REAL(8), 8
#type_map   ARRAY_9D   : REAL(8), 9
#type_map   ARRAY_10D  : REAL(8), 10
#type_map   ARRAY_1F   : REAL(4), 1
#type_map   ARRAY_2F   : REAL(4), 2
#type_map   ARRAY_3F   : REAL(4), 3
#type_map   ARRAY_4F   : REAL(4), 4
#type_map   ARRAY_5F   : REAL(4), 5
#type_map   ARRAY_6F   : REAL(4), 6
#type_map   ARRAY_7F   : REAL(4), 7
#type_map   ARRAY_8F   : REAL(4), 8
#type_map   ARRAY_9F   : REAL(4), 9
#type_map   ARRAY_10F  : REAL(4), 10
#type_map   ARRAY_1I   : INTEGER, 1
#type_map   ARRAY_2I   : INTEGER, 2
#type_map   ARRAY_3I   : INTEGER, 3
#type_map   ARRAY_4I   : INTEGER, 4
#type_map   ARRAY_5I   : INTEGER, 5
#type_map   ARRAY_6I   : INTEGER, 6
#type_map   ARRAY_7I   : INTEGER, 7
#type_map   ARRAY_8I   : INTEGER, 8
#type_map   ARRAY_9I   : INTEGER, 9
#type_map   ARRAY_10I  : INTEGER, 10
#type_map   ARRAY_1S   : INTEGER(2), 1
#type_map   ARRAY_2S   : INTEGER(2), 2
#type_map   ARRAY_3S   : INTEGER(2), 3
#type_map   ARRAY_4S   : INTEGER(2), 4
#type_map   ARRAY_5S   : INTEGER(2), 5
#type_map   ARRAY_6S   : INTEGER(2), 6
#type_map   ARRAY_7S   : INTEGER(2), 7
#type_map   ARRAY_8S   : INTEGER(2), 8
#type_map   ARRAY_9S   : INTEGER(2), 9
#type_map   ARRAY_10S  : INTEGER(2), 10
#type_map   ARRAY_1L   : INTEGER(4), 1
#type_map   ARRAY_2L   : INTEGER(4), 2
#type_map   ARRAY_3L   : INTEGER(4), 3
#type_map   ARRAY_4L   : INTEGER(4), 4
#type_map   ARRAY_5L   : INTEGER(4), 5
#type_map   ARRAY_6L   : INTEGER(4), 6
#type_map   ARRAY_7L   : INTEGER(4), 7
#type_map   ARRAY_8L   : INTEGER(4), 8
#type_map   ARRAY_9L   : INTEGER(4), 9
#type_map   ARRAY_10L  : INTEGER(4), 10
#type_map   ARRAY_1B   : LOGICAL, 1
#type_map   ARRAY_2B   : LOGICAL, 2
#type_map   ARRAY_3B   : LOGICAL, 3
#type_map   ARRAY_4B   : LOGICAL, 4
#type_map   ARRAY_5B   : LOGICAL, 5
#type_map   ARRAY_6B   : LOGICAL, 6
#type_map   ARRAY_7B   : LOGICAL, 7
#type_map   ARRAY_8B   : LOGICAL, 8
#type_map   ARRAY_9B   : LOGICAL, 9
#type_map   ARRAY_10B  : LOGICAL, 10
#type_map   ARRAY_1LB  : LOGICAL(4), 1
#type_map   ARRAY_2LB  : LOGICAL(4), 2
#type_map   ARRAY_3LB  : LOGICAL(4), 3
#type_map   ARRAY_4LB  : LOGICAL(4), 4
#type_map   ARRAY_5LB  : LOGICAL(4), 5
#type_map   ARRAY_6LB  : LOGICAL(4), 6
#type_map   ARRAY_7LB  : LOGICAL(4), 7
#type_map   ARRAY_8LB  : LOGICAL(4), 8
#type_map   ARRAY_9LB  : LOGICAL(4), 9
#type_map   ARRAY_10LB : LOGICAL(4), 10
#type_map   ARRAY_1C   : INTEGER(1), 1
#type_map   ARRAY_2C   : INTEGER(1), 2
#type_map   ARRAY_3C   : INTEGER(1), 3
#type_map   ARRAY_4C   : INTEGER(1), 4
#type_map   ARRAY_5C   : INTEGER(1), 5
#type_map   ARRAY_6C   : INTEGER(1), 6
#type_map   ARRAY_7C   : INTEGER(1), 7
#type_map   ARRAY_8C   : INTEGER(1), 8
#type_map   ARRAY_9C   : INTEGER(1), 9
#type_map   ARRAY_10C  : INTEGER(1), 10
#type_map   ARRAY_1US  : UNSIGNED(2), 1
#type_map   ARRAY_2US  : UNSIGNED(2), 2
#type_map   ARRAY_3US  : UNSIGNED(2), 3
#type_map   ARRAY_4US  : UNSIGNED(2), 4
#type_map   ARRAY_5US  : UNSIGNED(2), 5
#type_map   ARRAY_6US  : UNSIGNED(2), 6
#type_map   ARRAY_7US  : UNSIGNED(2), 7
#type_map   ARRAY_8US  : UNSIGNED(2), 8
#type_map   ARRAY_9US  : UNSIGNED(2), 9
#type_map   ARRAY_10US : UNSIGNED(2), 10
#type_map   ARRAY_1UL  : UNSIGNED(4), 1
#type_map   ARRAY_2UL  : UNSIGNED(4), 2
#type_map   ARRAY_3UL  : UNSIGNED(4), 3
#type_map   ARRAY_4UL  : UNSIGNED(4), 4
#type_map   ARRAY_5UL  : UNSIGNED(4), 5
#type_map   ARRAY_6UL  : UNSIGNED(4), 6
#type_map   ARRAY_7UL  : UNSIGNED(4), 7
#type_map   ARRAY_8UL  : UNSIGNED(4), 8
#type_map   ARRAY_9UL  : UNSIGNED(4), 9
#type_map   ARRAY_10UL : UNSIGNED(4), 10
#type_map   ARRAY_1UC  : UNSIGNED(1), 1
#type_map   ARRAY_2UC  : UNSIGNED(1), 2
#type_map   ARRAY_3UC  : UNSIGNED(1), 3
#type_map   ARRAY_4UC  : UNSIGNED(1), 4
#type_map   ARRAY_5UC  : UNSIGNED(1), 5
#type_map   ARRAY_6UC  : UNSIGNED(1), 6
#type_map   ARRAY_7UC  : UNSIGNED(1), 7
#type_map   ARRAY_8UC  : UNSIGNED(1), 8
#type_map   ARRAY_9UC  : UNSIGNED(1), 9
#type_map   ARRAY_10UC : UNSIGNED(1), 10
#defineb CHECKSIZE(_stack,_i)            if _i > stackSize(_stack) then
                                         begin
                                           growStack(_stack,_i);
                                         end
#defineb CHECKSIZE2(_stack,_i1,_i2)      if i1 > _i2 then
                                         begin
                                           if _i1 > stackSize(_stack) then
                                           begin
                                             growStack(_stack,_i1);
                                           end;
                                         end
                                         else if _i2 > stackSize(_stack) then
                                         begin
                                           growStack(_stack,_i2);
                                         end
#defineb GETSIZE(_stack)                 stackSize(_stack)
#defineb LOG(_a)                         ln(_a)
#definef ln(_a)                          LOG(_a)
#definef logit(_a)                       LOG((_a)/(1-(_a)))
#definef sqr(_a)                         _a*_a
#definef zero(_a)                        _a:=0
#definef set_all(_a,_s)                  _a:=_s
#definef inc(_a)                         _a:=_a+1
#definef dec(_a)                         _a:=_a-1
#definef incby(_a,_s)                    _a:=_a+(_s)
#definef decby(_a,_s)                    _a:=_a-(_s)
#definef mulby(_a,_s)                    _a:=_a*(_s)
#definef divby(_a,_s)                    _a:=_a/(_s)
