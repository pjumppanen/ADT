//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10B; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10B(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10B; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10B(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10LB; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10LB(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10LB; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10LB(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10C; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10C(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10C; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10C(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10UC; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10UC(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UC; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10UC(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10I; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10I(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10I; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10I(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10S; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10S(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10S; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10S(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10US; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10US(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10US; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10US(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10L; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10L(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10L; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10L(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10UL; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10UL(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UL; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10UL(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10F; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10F(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10F; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10F(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_1D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_1D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_2D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_2D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_3D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_3D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_4D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_4D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_5D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_5D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_6D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_6D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_7D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_7D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_8D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_8D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_9D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_9D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
//  ----------------------------------------------------------------------------
// existing array query method - use to obtain an array from a pointer
// passed from R that has previously been mapped by this array plan
function AdtArrayPlan.existing(var pArray : ARRAY_10D; pExisting : pchar) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10D(Actor.existing(varType(pArray), pExisting))
  else
    pArray := nil;

  existing := (pArray <> nil);
end;

// New array creation method
function AdtArrayPlan.create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10D; pExisting : pchar = nil) : boolean ; overload;

begin
  if (Actor <> nil) then
    pArray := ARRAY_10D(Actor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  create := (pArray <> nil);
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1B; const pRefArray : ARRAY_1B) : boolean ; overload;

begin
  pArray := ARRAY_1B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2B; const pRefArray : ARRAY_2B) : boolean ; overload;

begin
  pArray := ARRAY_2B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3B; const pRefArray : ARRAY_3B) : boolean ; overload;

begin
  pArray := ARRAY_3B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4B; const pRefArray : ARRAY_4B) : boolean ; overload;

begin
  pArray := ARRAY_4B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5B; const pRefArray : ARRAY_5B) : boolean ; overload;

begin
  pArray := ARRAY_5B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6B; const pRefArray : ARRAY_6B) : boolean ; overload;

begin
  pArray := ARRAY_6B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7B; const pRefArray : ARRAY_7B) : boolean ; overload;

begin
  pArray := ARRAY_7B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8B; const pRefArray : ARRAY_8B) : boolean ; overload;

begin
  pArray := ARRAY_8B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9B; const pRefArray : ARRAY_9B) : boolean ; overload;

begin
  pArray := ARRAY_9B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10B; const pRefArray : ARRAY_10B) : boolean ; overload;

begin
  pArray := ARRAY_10B(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10B) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1LB; const pRefArray : ARRAY_1LB) : boolean ; overload;

begin
  pArray := ARRAY_1LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2LB; const pRefArray : ARRAY_2LB) : boolean ; overload;

begin
  pArray := ARRAY_2LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3LB; const pRefArray : ARRAY_3LB) : boolean ; overload;

begin
  pArray := ARRAY_3LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4LB; const pRefArray : ARRAY_4LB) : boolean ; overload;

begin
  pArray := ARRAY_4LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5LB; const pRefArray : ARRAY_5LB) : boolean ; overload;

begin
  pArray := ARRAY_5LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6LB; const pRefArray : ARRAY_6LB) : boolean ; overload;

begin
  pArray := ARRAY_6LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7LB; const pRefArray : ARRAY_7LB) : boolean ; overload;

begin
  pArray := ARRAY_7LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8LB; const pRefArray : ARRAY_8LB) : boolean ; overload;

begin
  pArray := ARRAY_8LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9LB; const pRefArray : ARRAY_9LB) : boolean ; overload;

begin
  pArray := ARRAY_9LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10LB; const pRefArray : ARRAY_10LB) : boolean ; overload;

begin
  pArray := ARRAY_10LB(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10LB) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1C; const pRefArray : ARRAY_1C) : boolean ; overload;

begin
  pArray := ARRAY_1C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2C; const pRefArray : ARRAY_2C) : boolean ; overload;

begin
  pArray := ARRAY_2C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3C; const pRefArray : ARRAY_3C) : boolean ; overload;

begin
  pArray := ARRAY_3C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4C; const pRefArray : ARRAY_4C) : boolean ; overload;

begin
  pArray := ARRAY_4C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5C; const pRefArray : ARRAY_5C) : boolean ; overload;

begin
  pArray := ARRAY_5C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6C; const pRefArray : ARRAY_6C) : boolean ; overload;

begin
  pArray := ARRAY_6C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7C; const pRefArray : ARRAY_7C) : boolean ; overload;

begin
  pArray := ARRAY_7C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8C; const pRefArray : ARRAY_8C) : boolean ; overload;

begin
  pArray := ARRAY_8C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9C; const pRefArray : ARRAY_9C) : boolean ; overload;

begin
  pArray := ARRAY_9C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10C; const pRefArray : ARRAY_10C) : boolean ; overload;

begin
  pArray := ARRAY_10C(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10C) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UC; const pRefArray : ARRAY_1UC) : boolean ; overload;

begin
  pArray := ARRAY_1UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UC; const pRefArray : ARRAY_2UC) : boolean ; overload;

begin
  pArray := ARRAY_2UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UC; const pRefArray : ARRAY_3UC) : boolean ; overload;

begin
  pArray := ARRAY_3UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UC; const pRefArray : ARRAY_4UC) : boolean ; overload;

begin
  pArray := ARRAY_4UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UC; const pRefArray : ARRAY_5UC) : boolean ; overload;

begin
  pArray := ARRAY_5UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UC; const pRefArray : ARRAY_6UC) : boolean ; overload;

begin
  pArray := ARRAY_6UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UC; const pRefArray : ARRAY_7UC) : boolean ; overload;

begin
  pArray := ARRAY_7UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UC; const pRefArray : ARRAY_8UC) : boolean ; overload;

begin
  pArray := ARRAY_8UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UC; const pRefArray : ARRAY_9UC) : boolean ; overload;

begin
  pArray := ARRAY_9UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UC; const pRefArray : ARRAY_10UC) : boolean ; overload;

begin
  pArray := ARRAY_10UC(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UC) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1I; const pRefArray : ARRAY_1I) : boolean ; overload;

begin
  pArray := ARRAY_1I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2I; const pRefArray : ARRAY_2I) : boolean ; overload;

begin
  pArray := ARRAY_2I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3I; const pRefArray : ARRAY_3I) : boolean ; overload;

begin
  pArray := ARRAY_3I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4I; const pRefArray : ARRAY_4I) : boolean ; overload;

begin
  pArray := ARRAY_4I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5I; const pRefArray : ARRAY_5I) : boolean ; overload;

begin
  pArray := ARRAY_5I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6I; const pRefArray : ARRAY_6I) : boolean ; overload;

begin
  pArray := ARRAY_6I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7I; const pRefArray : ARRAY_7I) : boolean ; overload;

begin
  pArray := ARRAY_7I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8I; const pRefArray : ARRAY_8I) : boolean ; overload;

begin
  pArray := ARRAY_8I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9I; const pRefArray : ARRAY_9I) : boolean ; overload;

begin
  pArray := ARRAY_9I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10I; const pRefArray : ARRAY_10I) : boolean ; overload;

begin
  pArray := ARRAY_10I(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10I) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1S; const pRefArray : ARRAY_1S) : boolean ; overload;

begin
  pArray := ARRAY_1S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2S; const pRefArray : ARRAY_2S) : boolean ; overload;

begin
  pArray := ARRAY_2S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3S; const pRefArray : ARRAY_3S) : boolean ; overload;

begin
  pArray := ARRAY_3S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4S; const pRefArray : ARRAY_4S) : boolean ; overload;

begin
  pArray := ARRAY_4S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5S; const pRefArray : ARRAY_5S) : boolean ; overload;

begin
  pArray := ARRAY_5S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6S; const pRefArray : ARRAY_6S) : boolean ; overload;

begin
  pArray := ARRAY_6S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7S; const pRefArray : ARRAY_7S) : boolean ; overload;

begin
  pArray := ARRAY_7S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8S; const pRefArray : ARRAY_8S) : boolean ; overload;

begin
  pArray := ARRAY_8S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9S; const pRefArray : ARRAY_9S) : boolean ; overload;

begin
  pArray := ARRAY_9S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10S; const pRefArray : ARRAY_10S) : boolean ; overload;

begin
  pArray := ARRAY_10S(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10S) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1US; const pRefArray : ARRAY_1US) : boolean ; overload;

begin
  pArray := ARRAY_1US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2US; const pRefArray : ARRAY_2US) : boolean ; overload;

begin
  pArray := ARRAY_2US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3US; const pRefArray : ARRAY_3US) : boolean ; overload;

begin
  pArray := ARRAY_3US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4US; const pRefArray : ARRAY_4US) : boolean ; overload;

begin
  pArray := ARRAY_4US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5US; const pRefArray : ARRAY_5US) : boolean ; overload;

begin
  pArray := ARRAY_5US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6US; const pRefArray : ARRAY_6US) : boolean ; overload;

begin
  pArray := ARRAY_6US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7US; const pRefArray : ARRAY_7US) : boolean ; overload;

begin
  pArray := ARRAY_7US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8US; const pRefArray : ARRAY_8US) : boolean ; overload;

begin
  pArray := ARRAY_8US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9US; const pRefArray : ARRAY_9US) : boolean ; overload;

begin
  pArray := ARRAY_9US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10US; const pRefArray : ARRAY_10US) : boolean ; overload;

begin
  pArray := ARRAY_10US(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10US) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1L; const pRefArray : ARRAY_1L) : boolean ; overload;

begin
  pArray := ARRAY_1L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2L; const pRefArray : ARRAY_2L) : boolean ; overload;

begin
  pArray := ARRAY_2L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3L; const pRefArray : ARRAY_3L) : boolean ; overload;

begin
  pArray := ARRAY_3L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4L; const pRefArray : ARRAY_4L) : boolean ; overload;

begin
  pArray := ARRAY_4L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5L; const pRefArray : ARRAY_5L) : boolean ; overload;

begin
  pArray := ARRAY_5L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6L; const pRefArray : ARRAY_6L) : boolean ; overload;

begin
  pArray := ARRAY_6L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7L; const pRefArray : ARRAY_7L) : boolean ; overload;

begin
  pArray := ARRAY_7L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8L; const pRefArray : ARRAY_8L) : boolean ; overload;

begin
  pArray := ARRAY_8L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9L; const pRefArray : ARRAY_9L) : boolean ; overload;

begin
  pArray := ARRAY_9L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10L; const pRefArray : ARRAY_10L) : boolean ; overload;

begin
  pArray := ARRAY_10L(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10L) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UL; const pRefArray : ARRAY_1UL) : boolean ; overload;

begin
  pArray := ARRAY_1UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UL; const pRefArray : ARRAY_2UL) : boolean ; overload;

begin
  pArray := ARRAY_2UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UL; const pRefArray : ARRAY_3UL) : boolean ; overload;

begin
  pArray := ARRAY_3UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UL; const pRefArray : ARRAY_4UL) : boolean ; overload;

begin
  pArray := ARRAY_4UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UL; const pRefArray : ARRAY_5UL) : boolean ; overload;

begin
  pArray := ARRAY_5UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UL; const pRefArray : ARRAY_6UL) : boolean ; overload;

begin
  pArray := ARRAY_6UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UL; const pRefArray : ARRAY_7UL) : boolean ; overload;

begin
  pArray := ARRAY_7UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UL; const pRefArray : ARRAY_8UL) : boolean ; overload;

begin
  pArray := ARRAY_8UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UL; const pRefArray : ARRAY_9UL) : boolean ; overload;

begin
  pArray := ARRAY_9UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UL; const pRefArray : ARRAY_10UL) : boolean ; overload;

begin
  pArray := ARRAY_10UL(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10UL) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1F; const pRefArray : ARRAY_1F) : boolean ; overload;

begin
  pArray := ARRAY_1F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2F; const pRefArray : ARRAY_2F) : boolean ; overload;

begin
  pArray := ARRAY_2F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3F; const pRefArray : ARRAY_3F) : boolean ; overload;

begin
  pArray := ARRAY_3F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4F; const pRefArray : ARRAY_4F) : boolean ; overload;

begin
  pArray := ARRAY_4F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5F; const pRefArray : ARRAY_5F) : boolean ; overload;

begin
  pArray := ARRAY_5F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6F; const pRefArray : ARRAY_6F) : boolean ; overload;

begin
  pArray := ARRAY_6F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7F; const pRefArray : ARRAY_7F) : boolean ; overload;

begin
  pArray := ARRAY_7F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8F; const pRefArray : ARRAY_8F) : boolean ; overload;

begin
  pArray := ARRAY_8F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9F; const pRefArray : ARRAY_9F) : boolean ; overload;

begin
  pArray := ARRAY_9F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10F; const pRefArray : ARRAY_10F) : boolean ; overload;

begin
  pArray := ARRAY_10F(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10F) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1D; const pRefArray : ARRAY_1D) : boolean ; overload;

begin
  pArray := ARRAY_1D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_1D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2D; const pRefArray : ARRAY_2D) : boolean ; overload;

begin
  pArray := ARRAY_2D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_2D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3D; const pRefArray : ARRAY_3D) : boolean ; overload;

begin
  pArray := ARRAY_3D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_3D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4D; const pRefArray : ARRAY_4D) : boolean ; overload;

begin
  pArray := ARRAY_4D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_4D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5D; const pRefArray : ARRAY_5D) : boolean ; overload;

begin
  pArray := ARRAY_5D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_5D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6D; const pRefArray : ARRAY_6D) : boolean ; overload;

begin
  pArray := ARRAY_6D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_6D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7D; const pRefArray : ARRAY_7D) : boolean ; overload;

begin
  pArray := ARRAY_7D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_7D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8D; const pRefArray : ARRAY_8D) : boolean ; overload;

begin
  pArray := ARRAY_8D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_8D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9D; const pRefArray : ARRAY_9D) : boolean ; overload;

begin
  pArray := ARRAY_9D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_9D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Same shape array creation method
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10D; const pRefArray : ARRAY_10D) : boolean ; overload;

begin
  pArray := ARRAY_10D(AdtArrayPlanActor_createSameShape(rAllocator, pchar(pRefArray)));

  AdtArrayPlan_create := (pArray <> nil);
end;

// array destruction method
procedure AdtArrayPlan_destroy(var rAllocator : AdtMemAllocator; var pArray : ARRAY_10D) ; overload;

begin
  AdtArrayPlanActor_destroy(rAllocator, pchar(pArray));
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1B;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10B;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10B(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1LB;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10LB;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10LB(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1C;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10C;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10C(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1UC;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10UC;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10UC(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1I;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10I;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10I(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1S;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10S;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10S(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1US;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10US;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10US(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1L;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10L;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10L(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1UL;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10UL;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10UL(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1F;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10F;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10F(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
// Simplified array creation methods
// 1D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_1D;
                             nBaseIndex, nSize : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoord  : AdtArrayCoord;
  pActor  : AdtArrayPlanActor;

begin
  rCoord.IndexBase  := nBaseIndex;
  rCoord.Size       := nSize;
  pActor            := AdtArrayPlanActor_cachedArrayPlanActor(@rCoord, 1, false);

  if (pActor <> nil) then
    pArray := ARRAY_1D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 2D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_2D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..1] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 2, false);

  if (pActor <> nil) then
    pArray := ARRAY_2D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 3D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_3D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..2] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 3, false);

  if (pActor <> nil) then
    pArray := ARRAY_3D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 4D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_4D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..3] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 4, false);

  if (pActor <> nil) then
    pArray := ARRAY_4D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 5D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_5D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..4] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 5, false);

  if (pActor <> nil) then
    pArray := ARRAY_5D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 6D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_6D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..5] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 6, false);

  if (pActor <> nil) then
    pArray := ARRAY_6D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 7D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_7D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..6] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 7, false);

  if (pActor <> nil) then
    pArray := ARRAY_7D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 8D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_8D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..7] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 8, false);

  if (pActor <> nil) then
    pArray := ARRAY_8D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 9D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_9D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..8] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 9, false);

  if (pActor <> nil) then
    pArray := ARRAY_9D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;

// 10D
function AdtArrayPlan_create(var rAllocator : AdtMemAllocator;
                             var pArray : ARRAY_10D;
                             nBaseIndex1, nSize1 : longint;
                             nBaseIndex2, nSize2 : longint;
                             nBaseIndex3, nSize3 : longint;
                             nBaseIndex4, nSize4 : longint;
                             nBaseIndex5, nSize5 : longint;
                             nBaseIndex6, nSize6 : longint;
                             nBaseIndex7, nSize7 : longint;
                             nBaseIndex8, nSize8 : longint;
                             nBaseIndex9, nSize9 : longint;
                             nBaseIndex10, nSize10 : longint;
                             pExisting : pchar = nil) : boolean ; overload;

var
  rCoords  : Array [0..9] of AdtArrayCoord;
  pActor   : AdtArrayPlanActor;

begin
  rCoords[0].IndexBase  := nBaseIndex1;
  rCoords[0].Size       := nSize1;
  rCoords[1].IndexBase  := nBaseIndex2;
  rCoords[1].Size       := nSize2;
  rCoords[2].IndexBase  := nBaseIndex3;
  rCoords[2].Size       := nSize3;
  rCoords[3].IndexBase  := nBaseIndex4;
  rCoords[3].Size       := nSize4;
  rCoords[4].IndexBase  := nBaseIndex5;
  rCoords[4].Size       := nSize5;
  rCoords[5].IndexBase  := nBaseIndex6;
  rCoords[5].Size       := nSize6;
  rCoords[6].IndexBase  := nBaseIndex7;
  rCoords[6].Size       := nSize7;
  rCoords[7].IndexBase  := nBaseIndex8;
  rCoords[7].Size       := nSize8;
  rCoords[8].IndexBase  := nBaseIndex9;
  rCoords[8].Size       := nSize9;
  rCoords[9].IndexBase  := nBaseIndex10;
  rCoords[9].Size       := nSize10;
  pActor                := AdtArrayPlanActor_cachedArrayPlanActor(rCoords, 10, false);

  if (pActor <> nil) then
    pArray := ARRAY_10D(pActor.create(rAllocator, varType(pArray), pExisting))
  else
    pArray := nil;

  AdtArrayPlan_create := (pArray <> nil);
end;
procedure zero(var rArrayOriginValue : boolean; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : boolean; var rDestArrayOriginValue : boolean; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : longbool; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : longbool; var rDestArrayOriginValue : longbool; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : shortint; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : shortint; var rDestArrayOriginValue : shortint; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : byte; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : byte; var rDestArrayOriginValue : byte; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : smallint; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : smallint; var rDestArrayOriginValue : smallint; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : word; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : word; var rDestArrayOriginValue : word; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : longint; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : longint; var rDestArrayOriginValue : longint; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : longword; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : longword; var rDestArrayOriginValue : longword; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : single; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : single; var rDestArrayOriginValue : single; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

procedure zero(var rArrayOriginValue : double; nCount : longint) ; overload;

begin
  FillChar(rArrayOriginValue, nCount * SizeOf(rArrayOriginValue), 0);
end;

procedure xcopy(var rSrcArrayOriginValue : double; var rDestArrayOriginValue : double; nCount : longint) ; overload;

begin
  Move(rSrcArrayOriginValue, rDestArrayOriginValue, nCount * SizeOf(rSrcArrayOriginValue));
end;

// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1B; pRefArray : ARRAY_1B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2B; pRefArray : ARRAY_2B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3B; pRefArray : ARRAY_3B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4B; pRefArray : ARRAY_4B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5B; pRefArray : ARRAY_5B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6B; pRefArray : ARRAY_6B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7B; pRefArray : ARRAY_7B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8B; pRefArray : ARRAY_8B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9B; pRefArray : ARRAY_9B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10B) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10B) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10B; pRefArray : ARRAY_10B) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10B) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1LB; pRefArray : ARRAY_1LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2LB; pRefArray : ARRAY_2LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3LB; pRefArray : ARRAY_3LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4LB; pRefArray : ARRAY_4LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5LB; pRefArray : ARRAY_5LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6LB; pRefArray : ARRAY_6LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7LB; pRefArray : ARRAY_7LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8LB; pRefArray : ARRAY_8LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9LB; pRefArray : ARRAY_9LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10LB) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10LB) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10LB; pRefArray : ARRAY_10LB) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10LB) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1C; pRefArray : ARRAY_1C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2C; pRefArray : ARRAY_2C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3C; pRefArray : ARRAY_3C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4C; pRefArray : ARRAY_4C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5C; pRefArray : ARRAY_5C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6C; pRefArray : ARRAY_6C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7C; pRefArray : ARRAY_7C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8C; pRefArray : ARRAY_8C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9C; pRefArray : ARRAY_9C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10C) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10C) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10C; pRefArray : ARRAY_10C) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10C) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1UC; pRefArray : ARRAY_1UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2UC; pRefArray : ARRAY_2UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3UC; pRefArray : ARRAY_3UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4UC; pRefArray : ARRAY_4UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5UC; pRefArray : ARRAY_5UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6UC; pRefArray : ARRAY_6UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7UC; pRefArray : ARRAY_7UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8UC; pRefArray : ARRAY_8UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9UC; pRefArray : ARRAY_9UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10UC) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10UC) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10UC; pRefArray : ARRAY_10UC) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10UC) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1I; pRefArray : ARRAY_1I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2I; pRefArray : ARRAY_2I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3I; pRefArray : ARRAY_3I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4I; pRefArray : ARRAY_4I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5I; pRefArray : ARRAY_5I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6I; pRefArray : ARRAY_6I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7I; pRefArray : ARRAY_7I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8I; pRefArray : ARRAY_8I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9I; pRefArray : ARRAY_9I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10I) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10I) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10I; pRefArray : ARRAY_10I) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10I) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1S; pRefArray : ARRAY_1S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2S; pRefArray : ARRAY_2S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3S; pRefArray : ARRAY_3S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4S; pRefArray : ARRAY_4S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5S; pRefArray : ARRAY_5S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6S; pRefArray : ARRAY_6S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7S; pRefArray : ARRAY_7S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8S; pRefArray : ARRAY_8S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9S; pRefArray : ARRAY_9S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10S) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10S) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10S; pRefArray : ARRAY_10S) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10S) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1US; pRefArray : ARRAY_1US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2US; pRefArray : ARRAY_2US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3US; pRefArray : ARRAY_3US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4US; pRefArray : ARRAY_4US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5US; pRefArray : ARRAY_5US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6US; pRefArray : ARRAY_6US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7US; pRefArray : ARRAY_7US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8US; pRefArray : ARRAY_8US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9US; pRefArray : ARRAY_9US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10US) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10US) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10US; pRefArray : ARRAY_10US) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10US) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1L; pRefArray : ARRAY_1L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2L; pRefArray : ARRAY_2L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3L; pRefArray : ARRAY_3L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4L; pRefArray : ARRAY_4L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5L; pRefArray : ARRAY_5L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6L; pRefArray : ARRAY_6L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7L; pRefArray : ARRAY_7L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8L; pRefArray : ARRAY_8L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9L; pRefArray : ARRAY_9L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10L) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10L) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10L; pRefArray : ARRAY_10L) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10L) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1UL; pRefArray : ARRAY_1UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2UL; pRefArray : ARRAY_2UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3UL; pRefArray : ARRAY_3UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4UL; pRefArray : ARRAY_4UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5UL; pRefArray : ARRAY_5UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6UL; pRefArray : ARRAY_6UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7UL; pRefArray : ARRAY_7UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8UL; pRefArray : ARRAY_8UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9UL; pRefArray : ARRAY_9UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10UL) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10UL) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10UL; pRefArray : ARRAY_10UL) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10UL) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1F; pRefArray : ARRAY_1F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2F; pRefArray : ARRAY_2F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3F; pRefArray : ARRAY_3F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4F; pRefArray : ARRAY_4F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5F; pRefArray : ARRAY_5F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6F; pRefArray : ARRAY_6F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7F; pRefArray : ARRAY_7F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8F; pRefArray : ARRAY_8F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9F; pRefArray : ARRAY_9F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10F) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10F) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10F; pRefArray : ARRAY_10F) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10F) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_1D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_1D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_1D; pRefArray : ARRAY_1D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_1D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_2D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_2D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_2D; pRefArray : ARRAY_2D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_2D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_3D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_3D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_3D; pRefArray : ARRAY_3D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_3D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_4D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_4D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_4D; pRefArray : ARRAY_4D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_4D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_5D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_5D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_5D; pRefArray : ARRAY_5D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_5D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_6D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_6D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_6D; pRefArray : ARRAY_6D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_6D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_7D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_7D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_7D; pRefArray : ARRAY_7D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_7D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_8D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_8D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_8D; pRefArray : ARRAY_8D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_8D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_9D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_9D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_9D; pRefArray : ARRAY_9D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_9D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
// zero methods
procedure AdtArrays.zero(pArray : ARRAY_10D) ; overload;

var
  pArrayInfo : PAdtArrayInfo;

begin
  pArrayInfo := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));

  AdtArray.zero(pArrayInfo^);
end;

// xcopy methods
procedure AdtArrays.xcopy(pArraySrc, pArrayDest : ARRAY_10D) ; overload;

var
  pArrayInfoSrc   : PAdtArrayInfo;
  pArrayInfoDest  : PAdtArrayInfo;

begin
  pArrayInfoSrc   := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArraySrc));
  pArrayInfoDest  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArrayDest));

  AdtArray.xcopy(pArrayInfoDest^, pArrayInfoSrc);
end;

// Same shape array creation method - copying shape from existing array
function AdtArrays.create(var pArray : ARRAY_10D; pRefArray : ARRAY_10D) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray, pRefArray);
end;

// array destruction method
procedure AdtArrays.destroy(var pArray : ARRAY_10D) ; overload;

begin
  AdtArrayPlan_destroy(_MemAllocator, pArray);
end;
procedure AdtArrays.set_all(pArray : ARRAY_1B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10B; value : boolean) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pboolean;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pboolean(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(boolean);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10LB; value : longbool) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongbool;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongbool(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longbool);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10C) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10C; value : shortint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pshortint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pshortint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(shortint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10UC) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10UC; value : byte) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pbyte;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pbyte(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(byte);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10I) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10I; value : integer) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pinteger;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pinteger(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(integer);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10S) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10S; value : smallint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psmallint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psmallint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(smallint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10US) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10US; value : word) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(word);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10L) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10L; value : longint) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongint;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongint(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longint);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10UL) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10UL; value : longword) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : plongword;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := plongword(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(longword);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10F) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_1D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_1D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_1D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_1D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_1D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_2D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_2D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_2D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_2D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_2D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_3D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_3D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_3D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_3D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_3D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_4D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_4D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_4D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_4D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_4D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_5D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_5D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_5D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_5D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_5D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_6D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_6D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_6D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_6D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_6D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_7D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_7D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_7D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_7D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_7D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_8D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_8D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_8D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_8D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_8D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_9D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_9D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_9D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_9D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_9D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.set_all(pArray : ARRAY_10D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := value;
  end;
end;

procedure AdtArrays.inc(pArray : ARRAY_10D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + 1;
  end;
end;

procedure AdtArrays.dec(pArray : ARRAY_10D) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - 1;
  end;
end;

procedure AdtArrays.incby(pArray : ARRAY_10D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] + value;
  end;
end;

procedure AdtArrays.decby(pArray : ARRAY_10D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] - value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_1F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_1F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_2F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_2F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_3F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_3F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_4F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_4F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_5F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_5F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_6F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_6F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_7F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_7F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_8F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_8F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_9F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_9F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_10F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_10F; value : single) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : psingle;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := psingle(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(single);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_1D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_1D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_2D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_2D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_3D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_3D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_4D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_4D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_5D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_5D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_6D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_6D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_7D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_7D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_8D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_8D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_9D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_9D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
procedure AdtArrays.mulby(pArray : ARRAY_10D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] * value;
  end;
end;

procedure AdtArrays.divby(pArray : ARRAY_10D; value : double) ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pData       : pdouble;
  nCount      : longint;
  cn          : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := pdouble(firstData(pArrayInfo^));
  nCount      := lengthOfData(pArrayInfo^) div sizeof(double);

  for cn := 0 to nCount - 1 do
  begin
    pData[cn] := pData[cn] / value;
  end;
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10B) : ARRAY_1B ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1B;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2B; i1 : longint) : ARRAY_1B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3B; i1 : longint) : ARRAY_2B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3B; i1, i2 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4B; i1 : longint) : ARRAY_3B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4B; i1, i2 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4B; i1, i2, i3 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5B; i1 : longint) : ARRAY_4B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5B; i1, i2 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5B; i1, i2, i3 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5B; i1, i2, i3, i4 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6B; i1 : longint) : ARRAY_5B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6B; i1, i2 : longint) : ARRAY_4B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6B; i1, i2, i3 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6B; i1, i2, i3, i4 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6B; i1, i2, i3, i4, i5 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1 : longint) : ARRAY_6B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1, i2 : longint) : ARRAY_5B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1, i2, i3 : longint) : ARRAY_4B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1, i2, i3, i4 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1, i2, i3, i4, i5 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7B; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1 : longint) : ARRAY_7B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2 : longint) : ARRAY_6B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2, i3 : longint) : ARRAY_5B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2, i3, i4 : longint) : ARRAY_4B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2, i3, i4, i5 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8B; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1 : longint) : ARRAY_8B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2 : longint) : ARRAY_7B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3 : longint) : ARRAY_6B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3, i4 : longint) : ARRAY_5B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3, i4, i5 : longint) : ARRAY_4B ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9B; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1 : longint) : ARRAY_9B ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2 : longint) : ARRAY_8B ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3 : longint) : ARRAY_7B ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4 : longint) : ARRAY_6B ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4, i5 : longint) : ARRAY_5B ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4B ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3B ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2B ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10B; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1B ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1B(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1B) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1B; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1B(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1B; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1B(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1B;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10B;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9B ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10B ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10LB) : ARRAY_1LB ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1LB;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2LB; i1 : longint) : ARRAY_1LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3LB; i1 : longint) : ARRAY_2LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3LB; i1, i2 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4LB; i1 : longint) : ARRAY_3LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4LB; i1, i2 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4LB; i1, i2, i3 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5LB; i1 : longint) : ARRAY_4LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5LB; i1, i2 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5LB; i1, i2, i3 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5LB; i1, i2, i3, i4 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6LB; i1 : longint) : ARRAY_5LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6LB; i1, i2 : longint) : ARRAY_4LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6LB; i1, i2, i3 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6LB; i1, i2, i3, i4 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6LB; i1, i2, i3, i4, i5 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1 : longint) : ARRAY_6LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1, i2 : longint) : ARRAY_5LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1, i2, i3 : longint) : ARRAY_4LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1, i2, i3, i4 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1, i2, i3, i4, i5 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7LB; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1 : longint) : ARRAY_7LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2 : longint) : ARRAY_6LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2, i3 : longint) : ARRAY_5LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2, i3, i4 : longint) : ARRAY_4LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2, i3, i4, i5 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8LB; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1 : longint) : ARRAY_8LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2 : longint) : ARRAY_7LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3 : longint) : ARRAY_6LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3, i4 : longint) : ARRAY_5LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3, i4, i5 : longint) : ARRAY_4LB ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9LB; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1 : longint) : ARRAY_9LB ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2 : longint) : ARRAY_8LB ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3 : longint) : ARRAY_7LB ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4 : longint) : ARRAY_6LB ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4, i5 : longint) : ARRAY_5LB ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4LB ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3LB ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2LB ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10LB; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1LB ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1LB(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1LB) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1LB; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1LB(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1LB; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1LB(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1LB;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10LB;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9LB ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10LB ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10C) : ARRAY_1C ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1C;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2C; i1 : longint) : ARRAY_1C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3C; i1 : longint) : ARRAY_2C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3C; i1, i2 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4C; i1 : longint) : ARRAY_3C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4C; i1, i2 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4C; i1, i2, i3 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5C; i1 : longint) : ARRAY_4C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5C; i1, i2 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5C; i1, i2, i3 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5C; i1, i2, i3, i4 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6C; i1 : longint) : ARRAY_5C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6C; i1, i2 : longint) : ARRAY_4C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6C; i1, i2, i3 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6C; i1, i2, i3, i4 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6C; i1, i2, i3, i4, i5 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1 : longint) : ARRAY_6C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1, i2 : longint) : ARRAY_5C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1, i2, i3 : longint) : ARRAY_4C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1, i2, i3, i4 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1, i2, i3, i4, i5 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7C; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1 : longint) : ARRAY_7C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2 : longint) : ARRAY_6C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2, i3 : longint) : ARRAY_5C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2, i3, i4 : longint) : ARRAY_4C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2, i3, i4, i5 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8C; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1 : longint) : ARRAY_8C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2 : longint) : ARRAY_7C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3 : longint) : ARRAY_6C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3, i4 : longint) : ARRAY_5C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3, i4, i5 : longint) : ARRAY_4C ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9C; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1 : longint) : ARRAY_9C ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2 : longint) : ARRAY_8C ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3 : longint) : ARRAY_7C ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4 : longint) : ARRAY_6C ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4, i5 : longint) : ARRAY_5C ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4C ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3C ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2C ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10C; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1C ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1C(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1C) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1C; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1C(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1C; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1C(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1C;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10C;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9C ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10C ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10UC) : ARRAY_1UC ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UC;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2UC; i1 : longint) : ARRAY_1UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3UC; i1 : longint) : ARRAY_2UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3UC; i1, i2 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UC; i1 : longint) : ARRAY_3UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UC; i1, i2 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UC; i1, i2, i3 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UC; i1 : longint) : ARRAY_4UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UC; i1, i2 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UC; i1, i2, i3 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UC; i1, i2, i3, i4 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UC; i1 : longint) : ARRAY_5UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UC; i1, i2 : longint) : ARRAY_4UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UC; i1, i2, i3 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UC; i1, i2, i3, i4 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UC; i1, i2, i3, i4, i5 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1 : longint) : ARRAY_6UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1, i2 : longint) : ARRAY_5UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1, i2, i3 : longint) : ARRAY_4UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1, i2, i3, i4 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1, i2, i3, i4, i5 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UC; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1 : longint) : ARRAY_7UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2 : longint) : ARRAY_6UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2, i3 : longint) : ARRAY_5UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2, i3, i4 : longint) : ARRAY_4UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2, i3, i4, i5 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UC; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1 : longint) : ARRAY_8UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2 : longint) : ARRAY_7UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3 : longint) : ARRAY_6UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3, i4 : longint) : ARRAY_5UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3, i4, i5 : longint) : ARRAY_4UC ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UC; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1 : longint) : ARRAY_9UC ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2 : longint) : ARRAY_8UC ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3 : longint) : ARRAY_7UC ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4 : longint) : ARRAY_6UC ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4, i5 : longint) : ARRAY_5UC ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4UC ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3UC ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2UC ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UC; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1UC ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1UC(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1UC) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1UC; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1UC(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1UC; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1UC(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1UC;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10UC;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9UC ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10UC ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10I) : ARRAY_1I ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1I;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2I; i1 : longint) : ARRAY_1I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3I; i1 : longint) : ARRAY_2I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3I; i1, i2 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4I; i1 : longint) : ARRAY_3I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4I; i1, i2 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4I; i1, i2, i3 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5I; i1 : longint) : ARRAY_4I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5I; i1, i2 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5I; i1, i2, i3 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5I; i1, i2, i3, i4 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6I; i1 : longint) : ARRAY_5I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6I; i1, i2 : longint) : ARRAY_4I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6I; i1, i2, i3 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6I; i1, i2, i3, i4 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6I; i1, i2, i3, i4, i5 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1 : longint) : ARRAY_6I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1, i2 : longint) : ARRAY_5I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1, i2, i3 : longint) : ARRAY_4I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1, i2, i3, i4 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1, i2, i3, i4, i5 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7I; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1 : longint) : ARRAY_7I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2 : longint) : ARRAY_6I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2, i3 : longint) : ARRAY_5I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2, i3, i4 : longint) : ARRAY_4I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2, i3, i4, i5 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8I; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1 : longint) : ARRAY_8I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2 : longint) : ARRAY_7I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3 : longint) : ARRAY_6I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3, i4 : longint) : ARRAY_5I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3, i4, i5 : longint) : ARRAY_4I ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9I; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1 : longint) : ARRAY_9I ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2 : longint) : ARRAY_8I ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3 : longint) : ARRAY_7I ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4 : longint) : ARRAY_6I ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4, i5 : longint) : ARRAY_5I ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4I ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3I ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2I ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10I; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1I ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1I(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1I) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1I; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1I(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1I; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1I(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1I;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10I;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9I ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10I ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10S) : ARRAY_1S ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1S;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2S; i1 : longint) : ARRAY_1S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3S; i1 : longint) : ARRAY_2S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3S; i1, i2 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4S; i1 : longint) : ARRAY_3S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4S; i1, i2 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4S; i1, i2, i3 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5S; i1 : longint) : ARRAY_4S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5S; i1, i2 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5S; i1, i2, i3 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5S; i1, i2, i3, i4 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6S; i1 : longint) : ARRAY_5S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6S; i1, i2 : longint) : ARRAY_4S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6S; i1, i2, i3 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6S; i1, i2, i3, i4 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6S; i1, i2, i3, i4, i5 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1 : longint) : ARRAY_6S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1, i2 : longint) : ARRAY_5S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1, i2, i3 : longint) : ARRAY_4S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1, i2, i3, i4 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1, i2, i3, i4, i5 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7S; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1 : longint) : ARRAY_7S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2 : longint) : ARRAY_6S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2, i3 : longint) : ARRAY_5S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2, i3, i4 : longint) : ARRAY_4S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2, i3, i4, i5 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8S; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1 : longint) : ARRAY_8S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2 : longint) : ARRAY_7S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3 : longint) : ARRAY_6S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3, i4 : longint) : ARRAY_5S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3, i4, i5 : longint) : ARRAY_4S ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9S; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1 : longint) : ARRAY_9S ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2 : longint) : ARRAY_8S ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3 : longint) : ARRAY_7S ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4 : longint) : ARRAY_6S ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4, i5 : longint) : ARRAY_5S ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4S ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3S ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2S ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10S; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1S ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1S(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1S) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1S; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1S(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1S; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1S(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1S;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10S;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9S ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10S ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10US) : ARRAY_1US ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1US;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2US; i1 : longint) : ARRAY_1US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3US; i1 : longint) : ARRAY_2US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3US; i1, i2 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4US; i1 : longint) : ARRAY_3US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4US; i1, i2 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4US; i1, i2, i3 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5US; i1 : longint) : ARRAY_4US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5US; i1, i2 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5US; i1, i2, i3 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5US; i1, i2, i3, i4 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6US; i1 : longint) : ARRAY_5US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6US; i1, i2 : longint) : ARRAY_4US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6US; i1, i2, i3 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6US; i1, i2, i3, i4 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6US; i1, i2, i3, i4, i5 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1 : longint) : ARRAY_6US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1, i2 : longint) : ARRAY_5US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1, i2, i3 : longint) : ARRAY_4US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1, i2, i3, i4 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1, i2, i3, i4, i5 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7US; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1 : longint) : ARRAY_7US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2 : longint) : ARRAY_6US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2, i3 : longint) : ARRAY_5US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2, i3, i4 : longint) : ARRAY_4US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2, i3, i4, i5 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8US; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1 : longint) : ARRAY_8US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2 : longint) : ARRAY_7US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3 : longint) : ARRAY_6US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3, i4 : longint) : ARRAY_5US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3, i4, i5 : longint) : ARRAY_4US ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9US; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1 : longint) : ARRAY_9US ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2 : longint) : ARRAY_8US ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3 : longint) : ARRAY_7US ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4 : longint) : ARRAY_6US ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4, i5 : longint) : ARRAY_5US ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4US ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3US ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2US ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10US; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1US ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1US(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1US) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1US; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1US(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1US; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1US(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1US;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10US;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9US ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10US ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10L) : ARRAY_1L ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1L;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2L; i1 : longint) : ARRAY_1L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3L; i1 : longint) : ARRAY_2L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3L; i1, i2 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4L; i1 : longint) : ARRAY_3L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4L; i1, i2 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4L; i1, i2, i3 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5L; i1 : longint) : ARRAY_4L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5L; i1, i2 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5L; i1, i2, i3 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5L; i1, i2, i3, i4 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6L; i1 : longint) : ARRAY_5L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6L; i1, i2 : longint) : ARRAY_4L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6L; i1, i2, i3 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6L; i1, i2, i3, i4 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6L; i1, i2, i3, i4, i5 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1 : longint) : ARRAY_6L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1, i2 : longint) : ARRAY_5L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1, i2, i3 : longint) : ARRAY_4L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1, i2, i3, i4 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1, i2, i3, i4, i5 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7L; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1 : longint) : ARRAY_7L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2 : longint) : ARRAY_6L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2, i3 : longint) : ARRAY_5L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2, i3, i4 : longint) : ARRAY_4L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2, i3, i4, i5 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8L; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1 : longint) : ARRAY_8L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2 : longint) : ARRAY_7L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3 : longint) : ARRAY_6L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3, i4 : longint) : ARRAY_5L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3, i4, i5 : longint) : ARRAY_4L ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9L; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1 : longint) : ARRAY_9L ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2 : longint) : ARRAY_8L ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3 : longint) : ARRAY_7L ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4 : longint) : ARRAY_6L ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4, i5 : longint) : ARRAY_5L ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4L ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3L ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2L ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10L; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1L ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1L(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1L) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1L; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1L(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1L; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1L(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1L;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10L;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9L ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10L ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10UL) : ARRAY_1UL ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1UL;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2UL; i1 : longint) : ARRAY_1UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3UL; i1 : longint) : ARRAY_2UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3UL; i1, i2 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UL; i1 : longint) : ARRAY_3UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UL; i1, i2 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4UL; i1, i2, i3 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UL; i1 : longint) : ARRAY_4UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UL; i1, i2 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UL; i1, i2, i3 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5UL; i1, i2, i3, i4 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UL; i1 : longint) : ARRAY_5UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UL; i1, i2 : longint) : ARRAY_4UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UL; i1, i2, i3 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UL; i1, i2, i3, i4 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6UL; i1, i2, i3, i4, i5 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1 : longint) : ARRAY_6UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1, i2 : longint) : ARRAY_5UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1, i2, i3 : longint) : ARRAY_4UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1, i2, i3, i4 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1, i2, i3, i4, i5 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7UL; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1 : longint) : ARRAY_7UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2 : longint) : ARRAY_6UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2, i3 : longint) : ARRAY_5UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2, i3, i4 : longint) : ARRAY_4UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2, i3, i4, i5 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8UL; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1 : longint) : ARRAY_8UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2 : longint) : ARRAY_7UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3 : longint) : ARRAY_6UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3, i4 : longint) : ARRAY_5UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3, i4, i5 : longint) : ARRAY_4UL ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9UL; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1 : longint) : ARRAY_9UL ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2 : longint) : ARRAY_8UL ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3 : longint) : ARRAY_7UL ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4 : longint) : ARRAY_6UL ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4, i5 : longint) : ARRAY_5UL ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4UL ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3UL ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2UL ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10UL; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1UL ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1UL(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1UL) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1UL; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1UL(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1UL; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1UL(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1UL;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10UL;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9UL ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10UL ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10F) : ARRAY_1F ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1F;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2F; i1 : longint) : ARRAY_1F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3F; i1 : longint) : ARRAY_2F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3F; i1, i2 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4F; i1 : longint) : ARRAY_3F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4F; i1, i2 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4F; i1, i2, i3 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5F; i1 : longint) : ARRAY_4F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5F; i1, i2 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5F; i1, i2, i3 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5F; i1, i2, i3, i4 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6F; i1 : longint) : ARRAY_5F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6F; i1, i2 : longint) : ARRAY_4F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6F; i1, i2, i3 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6F; i1, i2, i3, i4 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6F; i1, i2, i3, i4, i5 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1 : longint) : ARRAY_6F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1, i2 : longint) : ARRAY_5F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1, i2, i3 : longint) : ARRAY_4F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1, i2, i3, i4 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1, i2, i3, i4, i5 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7F; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1 : longint) : ARRAY_7F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2 : longint) : ARRAY_6F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2, i3 : longint) : ARRAY_5F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2, i3, i4 : longint) : ARRAY_4F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2, i3, i4, i5 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8F; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1 : longint) : ARRAY_8F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2 : longint) : ARRAY_7F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3 : longint) : ARRAY_6F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3, i4 : longint) : ARRAY_5F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3, i4, i5 : longint) : ARRAY_4F ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9F; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1 : longint) : ARRAY_9F ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2 : longint) : ARRAY_8F ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3 : longint) : ARRAY_7F ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4 : longint) : ARRAY_6F ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4, i5 : longint) : ARRAY_5F ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4F ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3F ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2F ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10F; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1F ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1F(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1F) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1F; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1F(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1F; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1F(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1F;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10F;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9F ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10F ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
// flatten methods
function AdtArrays.createFlattened(pArray : ARRAY_2D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_3D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_4D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_5D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_6D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_7D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_8D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_9D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

function AdtArrays.createFlattened(pArray : ARRAY_10D) : ARRAY_1D ; overload;

var
  pArrayInfo  : PAdtArrayInfo;
  pFlattened  : ARRAY_1D;
  pData       : pchar;
  nCount      : longint;

begin
  pArrayInfo  := AdtArrayPlanActor_arrayInfo(_MemAllocator, pchar(pArray));
  pData       := firstData(pArrayInfo^);
  pFlattened  := nil;
  nCount      := lengthOfData(pArrayInfo^) div sizeof(pFlattened[0]);

  AdtArrayPlan_create(_MemAllocator, pFlattened, 1, nCount, pData);

  createFlattened := pFlattened;
end;

// createSlice methods
function AdtArrays.createSlice(pArray : ARRAY_2D; i1 : longint) : ARRAY_1D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3D; i1 : longint) : ARRAY_2D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_3D; i1, i2 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4D; i1 : longint) : ARRAY_3D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_4D; i1, i2 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_4D; i1, i2, i3 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5D; i1 : longint) : ARRAY_4D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_5D; i1, i2 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_5D; i1, i2, i3 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_5D; i1, i2, i3, i4 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6D; i1 : longint) : ARRAY_5D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_5D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_6D; i1, i2 : longint) : ARRAY_4D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_6D; i1, i2, i3 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          3));
end;

function AdtArrays.createSlice(pArray : ARRAY_6D; i1, i2, i3, i4 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_6D; i1, i2, i3, i4, i5 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1 : longint) : ARRAY_6D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_6D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1, i2 : longint) : ARRAY_5D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_5D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1, i2, i3 : longint) : ARRAY_4D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1, i2, i3, i4 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1, i2, i3, i4, i5 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_7D; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1 : longint) : ARRAY_7D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_7D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2 : longint) : ARRAY_6D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_6D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2, i3 : longint) : ARRAY_5D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_5D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2, i3, i4 : longint) : ARRAY_4D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2, i3, i4, i5 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_8D; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1 : longint) : ARRAY_8D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_8D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2 : longint) : ARRAY_7D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_7D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3 : longint) : ARRAY_6D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_6D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3, i4 : longint) : ARRAY_5D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_5D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3, i4, i5 : longint) : ARRAY_4D ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_9D; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1 : longint) : ARRAY_9D ; overload;

var
  nIndex  : longint;

begin
  nIndex      := i1;
  createSlice := ARRAY_9D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          @nIndex,
                                                          1));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2 : longint) : ARRAY_8D ; overload;

var
  aIndices  : array [0..1] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  createSlice := ARRAY_8D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          2));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3 : longint) : ARRAY_7D ; overload;

var
  aIndices  : array [0..2] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  createSlice := ARRAY_7D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4 : longint) : ARRAY_6D ; overload;

var
  aIndices  : array [0..3] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  createSlice := ARRAY_6D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          4));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4, i5 : longint) : ARRAY_5D ; overload;

var
  aIndices  : array [0..4] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  createSlice := ARRAY_5D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          5));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4D ; overload;

var
  aIndices  : array [0..5] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  createSlice := ARRAY_4D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          6));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3D ; overload;

var
  aIndices  : array [0..6] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  createSlice := ARRAY_3D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          7));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2D ; overload;

var
  aIndices  : array [0..7] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  createSlice := ARRAY_2D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          8));
end;

function AdtArrays.createSlice(pArray : ARRAY_10D; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1D ; overload;

var
  aIndices  : array [0..8] of longint;

begin
  aIndices[0] := i1;
  aIndices[1] := i2;
  aIndices[2] := i3;
  aIndices[3] := i4;
  aIndices[4] := i5;
  aIndices[5] := i6;
  aIndices[6] := i7;
  aIndices[7] := i8;
  aIndices[8] := i9;
  createSlice := ARRAY_1D(AdtArrayPlanActor_createSlice(_MemAllocator,
                                                          pchar(pArray),
                                                          aIndices,
                                                          9));
end;

// Stack size method
function AdtArrays.stackSize(pArray : ARRAY_1D) : longint ; overload;

var
  pStackInfo : PAdtStackInfo;

begin
  pStackInfo  := stackInfo(pchar(pArray));
  stackSize   := pStackInfo^.StackSize;
end;

// Stack creation method
function AdtArrays.createStack(var pArray : ARRAY_1D; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

var
  pStack : pchar;

begin
  pStack      := pchar(pArray);
  createStack := createStack(pStack, nInitialSize, varType(pArray));
  pArray      := ARRAY_1D(pStack);
end;

// Stack growing method
procedure AdtArrays.growStack(var pArray : ARRAY_1D; nIndexNeeded : longint); overload;

var
  pStack : pchar;

begin
  pStack := pchar(pArray);
  growStack(pStack, nIndexNeeded);
  pArray := ARRAY_1D(pStack);
end;

// Simplified array creation methods
// 1D
function AdtArrays.create(var pArray : ARRAY_1D;
                          nBaseIndex, nSize : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex, nSize,
                                pExisting);
end;

// 2D
function AdtArrays.create(var pArray : ARRAY_2D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                pExisting);
end;

// 3D
function AdtArrays.create(var pArray : ARRAY_3D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                pExisting);
end;

// 4D
function AdtArrays.create(var pArray : ARRAY_4D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                pExisting);
end;

// 5D
function AdtArrays.create(var pArray : ARRAY_5D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                pExisting);
end;

// 6D
function AdtArrays.create(var pArray : ARRAY_6D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                pExisting);
end;

// 7D
function AdtArrays.create(var pArray : ARRAY_7D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                pExisting);
end;

// 8D
function AdtArrays.create(var pArray : ARRAY_8D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                pExisting);
end;

// 9D
function AdtArrays.create(var pArray : ARRAY_9D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                pExisting);
end;

// 10D
function AdtArrays.create(var pArray : ARRAY_10D;
                          nBaseIndex1, nSize1 : longint;
                          nBaseIndex2, nSize2 : longint;
                          nBaseIndex3, nSize3 : longint;
                          nBaseIndex4, nSize4 : longint;
                          nBaseIndex5, nSize5 : longint;
                          nBaseIndex6, nSize6 : longint;
                          nBaseIndex7, nSize7 : longint;
                          nBaseIndex8, nSize8 : longint;
                          nBaseIndex9, nSize9 : longint;
                          nBaseIndex10, nSize10 : longint;
                          pExisting : pchar = nil) : boolean ; overload;

begin
  create := AdtArrayPlan_create(_MemAllocator, pArray,
                                nBaseIndex1, nSize1,
                                nBaseIndex2, nSize2,
                                nBaseIndex3, nSize3,
                                nBaseIndex4, nSize4,
                                nBaseIndex5, nSize5,
                                nBaseIndex6, nSize6,
                                nBaseIndex7, nSize7,
                                nBaseIndex8, nSize8,
                                nBaseIndex9, nSize9,
                                nBaseIndex10, nSize10,
                                pExisting);
end;

procedure AdtArrays.check1(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_1D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 1, bThrowException, [ix1, n1]);
end;

procedure AdtArrays.check2(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_2D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 2, bThrowException, [ix1, n1, ix2, n2]);
end;

procedure AdtArrays.check3(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_3D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 3, bThrowException, [ix1, n1, ix2, n2, ix3, n3]);
end;

procedure AdtArrays.check4(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_4D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 4, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4]);
end;

procedure AdtArrays.check5(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_5D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 5, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5]);
end;

procedure AdtArrays.check6(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_6D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 6, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6]);
end;

procedure AdtArrays.check7(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_7D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 7, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7]);
end;

procedure AdtArrays.check8(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_8D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 8, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8]);
end;

procedure AdtArrays.check9(var pContext : AdtArrayPlanActor ;
                           pArray : ARRAY_9D ;
                           sArrayName, sFileName, pFileLine : AnsiString ;
                           bThrowException : boolean ;
                           ix1 : integer ;
                           n1 : AnsiString ;
                           ix2 : integer ;
                           n2 : AnsiString ;
                           ix3 : integer ;
                           n3 : AnsiString ;
                           ix4 : integer ;
                           n4 : AnsiString ;
                           ix5 : integer ;
                           n5 : AnsiString ;
                           ix6 : integer ;
                           n6 : AnsiString ;
                           ix7 : integer ;
                           n7 : AnsiString ;
                           ix8 : integer ;
                           n8 : AnsiString ;
                           ix9 : integer ;
                           n9 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 9, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9]);
end;

procedure AdtArrays.check10(var pContext : AdtArrayPlanActor ;
                            pArray : ARRAY_10D ;
                            sArrayName, sFileName, pFileLine : AnsiString ;
                            bThrowException : boolean ;
                            ix1 : integer ;
                            n1 : AnsiString ;
                            ix2 : integer ;
                            n2 : AnsiString ;
                            ix3 : integer ;
                            n3 : AnsiString ;
                            ix4 : integer ;
                            n4 : AnsiString ;
                            ix5 : integer ;
                            n5 : AnsiString ;
                            ix6 : integer ;
                            n6 : AnsiString ;
                            ix7 : integer ;
                            n7 : AnsiString ;
                            ix8 : integer ;
                            n8 : AnsiString ;
                            ix9 : integer ;
                            n9 : AnsiString ;
                            ix10 : integer ;
                            n10 : AnsiString) ; inline;
begin
  check(pContext, _MemAllocator, pchar(pArray), sArrayName, sFileName, pFileLine, 10, bThrowException, [ix1, n1, ix2, n2, ix3, n3, ix4, n4, ix5, n5, ix6, n6, ix7, n7, ix8, n8, ix9, n9, ix10, n10]);
end;
