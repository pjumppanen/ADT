// flatten methods
function createFlattened(pArray : ARRAY_2<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_3<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_4<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_5<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_6<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_7<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_8<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_9<T>) : ARRAY_1<T> ; overload;

function createFlattened(pArray : ARRAY_10<T>) : ARRAY_1<T> ; overload;

// createSlice methods
function createSlice(pArray : ARRAY_2<T>; i1 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_3<T>; i1 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_3<T>; i1, i2 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_4<T>; i1 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_4<T>; i1, i2 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_4<T>; i1, i2, i3 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_5<T>; i1 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_5<T>; i1, i2 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_5<T>; i1, i2, i3 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_5<T>; i1, i2, i3, i4 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_6<T>; i1 : longint) : ARRAY_5<T> ; overload;

function createSlice(pArray : ARRAY_6<T>; i1, i2 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_6<T>; i1, i2, i3 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_6<T>; i1, i2, i3, i4 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_6<T>; i1, i2, i3, i4, i5 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1 : longint) : ARRAY_6<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1, i2 : longint) : ARRAY_5<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1, i2, i3 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1, i2, i3, i4 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1, i2, i3, i4, i5 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_7<T>; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1 : longint) : ARRAY_7<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2 : longint) : ARRAY_6<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2, i3 : longint) : ARRAY_5<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2, i3, i4 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2, i3, i4, i5 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_8<T>; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1 : longint) : ARRAY_8<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2 : longint) : ARRAY_7<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3 : longint) : ARRAY_6<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3, i4 : longint) : ARRAY_5<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3, i4, i5 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_9<T>; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_1<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1 : longint) : ARRAY_9<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2 : longint) : ARRAY_8<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3 : longint) : ARRAY_7<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4 : longint) : ARRAY_6<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4, i5 : longint) : ARRAY_5<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4, i5, i6 : longint) : ARRAY_4<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4, i5, i6, i7 : longint) : ARRAY_3<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4, i5, i6, i7, i8 : longint) : ARRAY_2<T> ; overload;

function createSlice(pArray : ARRAY_10<T>; i1, i2, i3, i4, i5, i6, i7, i8, i9 : longint) : ARRAY_1<T> ; overload;

// Stack size method
function stackSize(pArray : ARRAY_1<T>) : longint ; overload;

// Stack creation method
function createStack(var pArray : ARRAY_1<T>; nInitialSize : longint = DEFAULT_STACK_SIZE) : boolean ; overload;

// Stack growing method
procedure growStack(var pArray : ARRAY_1<T>; nIndexNeeded : longint); overload;

// Simplified array creation methods
// 1D
function create(var pArray : ARRAY_1<T>;
                nBaseIndex, nSize : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 2D
function create(var pArray : ARRAY_2<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 3D
function create(var pArray : ARRAY_3<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 4D
function create(var pArray : ARRAY_4<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 5D
function create(var pArray : ARRAY_5<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 6D
function create(var pArray : ARRAY_6<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                nBaseIndex6, nSize6 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 7D
function create(var pArray : ARRAY_7<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                nBaseIndex6, nSize6 : longint;
                nBaseIndex7, nSize7 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 8D
function create(var pArray : ARRAY_8<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                nBaseIndex6, nSize6 : longint;
                nBaseIndex7, nSize7 : longint;
                nBaseIndex8, nSize8 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 9D
function create(var pArray : ARRAY_9<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                nBaseIndex6, nSize6 : longint;
                nBaseIndex7, nSize7 : longint;
                nBaseIndex8, nSize8 : longint;
                nBaseIndex9, nSize9 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// 10D
function create(var pArray : ARRAY_10<T>;
                nBaseIndex1, nSize1 : longint;
                nBaseIndex2, nSize2 : longint;
                nBaseIndex3, nSize3 : longint;
                nBaseIndex4, nSize4 : longint;
                nBaseIndex5, nSize5 : longint;
                nBaseIndex6, nSize6 : longint;
                nBaseIndex7, nSize7 : longint;
                nBaseIndex8, nSize8 : longint;
                nBaseIndex9, nSize9 : longint;
                nBaseIndex10, nSize10 : longint;
                pExisting : pchar = nil) : boolean ; overload;

// Bounds checking inline wrappers
procedure check1(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_1<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString) ; inline;

procedure check2(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_2<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString) ; inline;

procedure check3(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_3<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString) ; inline;

procedure check4(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_4<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString) ; inline;

procedure check5(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_5<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString ;
                 ix5 : integer ;
                 n5 : AnsiString) ; inline;

procedure check6(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_6<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString ;
                 ix5 : integer ;
                 n5 : AnsiString ;
                 ix6 : integer ;
                 n6 : AnsiString) ; inline;

procedure check7(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_7<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString ;
                 ix5 : integer ;
                 n5 : AnsiString ;
                 ix6 : integer ;
                 n6 : AnsiString ;
                 ix7 : integer ;
                 n7 : AnsiString) ; inline;

procedure check8(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_8<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString ;
                 ix5 : integer ;
                 n5 : AnsiString ;
                 ix6 : integer ;
                 n6 : AnsiString ;
                 ix7 : integer ;
                 n7 : AnsiString ;
                 ix8 : integer ;
                 n8 : AnsiString) ; inline;

procedure check9(var pContext : AdtArrayPlanActor ;
                 pArray : ARRAY_9<T> ;
                 sArrayName, sFileName, pFileLine : AnsiString ;
                 bThrowException : boolean ;
                 ix1 : integer ;
                 n1 : AnsiString ;
                 ix2 : integer ;
                 n2 : AnsiString ;
                 ix3 : integer ;
                 n3 : AnsiString ;
                 ix4 : integer ;
                 n4 : AnsiString ;
                 ix5 : integer ;
                 n5 : AnsiString ;
                 ix6 : integer ;
                 n6 : AnsiString ;
                 ix7 : integer ;
                 n7 : AnsiString ;
                 ix8 : integer ;
                 n8 : AnsiString ;
                 ix9 : integer ;
                 n9 : AnsiString) ; inline;

procedure check10(var pContext : AdtArrayPlanActor ;
                  pArray : ARRAY_10<T> ;
                  sArrayName, sFileName, pFileLine : AnsiString ;
                  bThrowException : boolean ;
                  ix1 : integer ;
                  n1 : AnsiString ;
                  ix2 : integer ;
                  n2 : AnsiString ;
                  ix3 : integer ;
                  n3 : AnsiString ;
                  ix4 : integer ;
                  n4 : AnsiString ;
                  ix5 : integer ;
                  n5 : AnsiString ;
                  ix6 : integer ;
                  n6 : AnsiString ;
                  ix7 : integer ;
                  n7 : AnsiString ;
                  ix8 : integer ;
                  n8 : AnsiString ;
                  ix9 : integer ;
                  n9 : AnsiString ;
                  ix10 : integer ;
                  n10 : AnsiString) ; inline;
